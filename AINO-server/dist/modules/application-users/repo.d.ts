import type { TCreateApplicationUserRequest, TUpdateApplicationUserRequest, TGetApplicationUsersQuery } from './dto';
export declare function createApplicationUser(applicationId: string, data: TCreateApplicationUserRequest): Promise<{
    email: string;
    id: string;
    name: string;
    status: string;
    createdAt: Date;
    updatedAt: Date;
    avatar: string | null;
    lastLoginAt: Date | null;
    applicationId: string;
    role: string;
    phone: string | null;
    department: string | null;
    position: string | null;
    tags: string[] | null;
    metadata: unknown;
}>;
export declare function getApplicationUsers(applicationId: string, query: TGetApplicationUsersQuery): Promise<{
    users: {
        id: string;
        applicationId: string;
        name: string;
        email: string;
        phone: string | null;
        avatar: string | null;
        status: string;
        role: string;
        department: string | null;
        position: string | null;
        tags: string[] | null;
        metadata: unknown;
        lastLoginAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }[];
    pagination: {
        page: number;
        limit: number;
        total: number;
        totalPages: number;
    };
}>;
export declare function getApplicationUserById(applicationId: string, userId: string): Promise<{
    id: string;
    applicationId: string;
    name: string;
    email: string;
    phone: string | null;
    avatar: string | null;
    status: string;
    role: string;
    department: string | null;
    position: string | null;
    tags: string[] | null;
    metadata: unknown;
    lastLoginAt: Date | null;
    createdAt: Date;
    updatedAt: Date;
}>;
export declare function updateApplicationUser(applicationId: string, userId: string, data: TUpdateApplicationUserRequest): Promise<{
    id: string;
    applicationId: string;
    name: string;
    email: string;
    phone: string | null;
    avatar: string | null;
    status: string;
    role: string;
    department: string | null;
    position: string | null;
    tags: string[] | null;
    metadata: unknown;
    lastLoginAt: Date | null;
    createdAt: Date;
    updatedAt: Date;
}>;
export declare function deleteApplicationUser(applicationId: string, userId: string): Promise<{
    email: string;
    id: string;
    name: string;
    status: string;
    createdAt: Date;
    updatedAt: Date;
    avatar: string | null;
    lastLoginAt: Date | null;
    applicationId: string;
    role: string;
    phone: string | null;
    department: string | null;
    position: string | null;
    tags: string[] | null;
    metadata: unknown;
}>;
export declare function checkEmailExists(applicationId: string, email: string, excludeUserId?: string): Promise<boolean>;
export declare function updateLastLoginTime(applicationId: string, userId: string): Promise<{
    id: string;
    applicationId: string;
    name: string;
    email: string;
    phone: string | null;
    avatar: string | null;
    status: string;
    role: string;
    department: string | null;
    position: string | null;
    tags: string[] | null;
    metadata: unknown;
    lastLoginAt: Date | null;
    createdAt: Date;
    updatedAt: Date;
}>;
//# sourceMappingURL=repo.d.ts.map